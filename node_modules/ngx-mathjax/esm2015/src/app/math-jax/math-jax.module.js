/**
 * @author davidshen84
 */
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MathJaxDirective } from './math-jax.directive';
import { MathJaxService } from './math-jax.service';
/**
 * Module configuration class.
 *
 * @example
 *
 * {
 *   version: '2.7.5',
 *   config: 'TeX-AMS_HTML',
 *   hostname: 'cdnjs.cloudflare.com'
 * }
 */
export class ModuleConfiguration {
}
/**
 * Module to load and configure the MathJax library.
 *
 * @example
 *
 * MathJaxModule.config(
 * {
 *     version: '2.7.5',
 *     config: 'TeX-AMS_HTML',
 *     hostname: 'cdnjs.cloudflare.com'
 * })
 */
export class MathJaxModule {
    constructor(service, moduleConfig) {
        service.init();
        /**
         * Define the **function string** to be inserted into the mathjax configuration script block.
         */
        const mathJaxHubConfig = (() => {
            MathJax.Hub.Config({
                skipStartupTypeset: true,
                messageStyle: 'none',
                tex2jax: { preview: 'none' },
            });
            MathJax.Hub.Register.StartupHook('End', () => {
                window.mathJaxHub$.next();
                window.mathJaxHub$.complete();
            });
        }).toString();
        if (moduleConfig) {
            /**
             * Insert the MathJax configuration script into the Head element.
             */
            (function () {
                const script = document.createElement('script');
                script.type = 'text/x-mathjax-config';
                script.text = `(${mathJaxHubConfig})();`;
                document.getElementsByTagName('head')[0].appendChild(script);
            })();
            /**
             * Insert the script block to load the MathJax library.
             */
            (function (version, config, hostname) {
                const script = document.createElement('script');
                script.type = 'text/javascript';
                script.src = `https://${hostname}/ajax/libs/mathjax/${version}/MathJax.js?config=${config}`;
                script.async = true;
                document.getElementsByTagName('head')[0].appendChild(script);
            })(moduleConfig.version, moduleConfig.config, moduleConfig.hostname);
        }
    }
    /**
     * Configure the provider for hte module.
     *
     * @deprecated Use forRoot or forChild method instead.
     * @param {boolean} forRoot Make sure it is set to `true` for the root module and `false` for any child module.
     * @param {ModuleConfiguration} moduleConfiguration A {ModuleConfiguration} instance.
     *
     * @return {ModuleWithproviders<MathJaxModule>} instance
     */
    static config(forRoot = true, moduleConfiguration = {
        version: '2.7.5',
        config: 'TeX-AMS_HTML',
        hostname: 'cdnjs.cloudflare.com',
    }) {
        return forRoot
            ? {
                ngModule: MathJaxModule,
                providers: [
                    { provide: ModuleConfiguration, useValue: moduleConfiguration },
                    { provide: MathJaxService, useClass: MathJaxService },
                ],
            }
            : {
                ngModule: MathJaxModule,
            };
    }
    /**
     * Configure the module for the root module.
     *
     * @param {ModuleConfiguration} moduleConfiguration configuration
     *
     * @return {ModuleWithproviders<MathJaxModule>}
     */
    static forRoot(moduleConfiguration = {
        version: '2.7.5',
        config: 'TeX-AMS_HTML',
        hostname: 'cdnjs.cloudflare.com',
    }) {
        return {
            ngModule: MathJaxModule,
            providers: [
                { provide: ModuleConfiguration, useValue: moduleConfiguration },
                { provide: MathJaxService, useClass: MathJaxService },
            ],
        };
    }
    /**
     * Configure the module for a child module.
     *
     * @return {object}
     */
    static forChild() {
        return {
            ngModule: MathJaxModule,
        };
    }
}
MathJaxModule.decorators = [
    { type: NgModule, args: [{
                declarations: [MathJaxDirective],
                imports: [CommonModule],
                exports: [MathJaxDirective],
            },] }
];
MathJaxModule.ctorParameters = () => [
    { type: MathJaxService },
    { type: ModuleConfiguration }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0aC1qYXgubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2FwcC9tYXRoLWpheC9tYXRoLWpheC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0dBRUc7QUFFSCxPQUFPLEVBQXVCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRXBEOzs7Ozs7Ozs7O0dBVUc7QUFDSCxNQUFNLE9BQU8sbUJBQW1CO0NBZ0IvQjtBQUVEOzs7Ozs7Ozs7OztHQVdHO0FBTUgsTUFBTSxPQUFPLGFBQWE7SUFDeEIsWUFBWSxPQUF1QixFQUFFLFlBQWtDO1FBQ3JFLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUVmOztXQUVHO1FBQ0gsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLEdBQUcsRUFBRTtZQUM3QixPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQztnQkFDakIsa0JBQWtCLEVBQUUsSUFBSTtnQkFDeEIsWUFBWSxFQUFFLE1BQU07Z0JBQ3BCLE9BQU8sRUFBRSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUU7YUFDN0IsQ0FBQyxDQUFDO1lBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUU7Z0JBQzNDLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQzFCLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDaEMsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUVkLElBQUksWUFBWSxFQUFFO1lBQ2hCOztlQUVHO1lBQ0gsQ0FBQztnQkFDQyxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBc0IsQ0FBQztnQkFDckUsTUFBTSxDQUFDLElBQUksR0FBRyx1QkFBdUIsQ0FBQztnQkFDdEMsTUFBTSxDQUFDLElBQUksR0FBRyxJQUFJLGdCQUFnQixNQUFNLENBQUM7Z0JBQ3pDLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDL0QsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUVMOztlQUVHO1lBQ0gsQ0FBQyxVQUFVLE9BQWUsRUFBRSxNQUFjLEVBQUUsUUFBZ0I7Z0JBQzFELE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFzQixDQUFDO2dCQUNyRSxNQUFNLENBQUMsSUFBSSxHQUFHLGlCQUFpQixDQUFDO2dCQUNoQyxNQUFNLENBQUMsR0FBRyxHQUFHLFdBQVcsUUFBUSxzQkFBc0IsT0FBTyxzQkFBc0IsTUFBTSxFQUFFLENBQUM7Z0JBQzVGLE1BQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO2dCQUNwQixRQUFRLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQy9ELENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDLE1BQU0sRUFBRSxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDdEU7SUFDSCxDQUFDO0lBRUQ7Ozs7Ozs7O09BUUc7SUFDSSxNQUFNLENBQUMsTUFBTSxDQUNsQixPQUFPLEdBQUcsSUFBSSxFQUNkLHNCQUEyQztRQUN6QyxPQUFPLEVBQUUsT0FBTztRQUNoQixNQUFNLEVBQUUsY0FBYztRQUN0QixRQUFRLEVBQUUsc0JBQXNCO0tBQ2pDO1FBRUQsT0FBTyxPQUFPO1lBQ1osQ0FBQyxDQUFDO2dCQUNFLFFBQVEsRUFBRSxhQUFhO2dCQUN2QixTQUFTLEVBQUU7b0JBQ1QsRUFBRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsUUFBUSxFQUFFLG1CQUFtQixFQUFFO29CQUMvRCxFQUFFLE9BQU8sRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBRTtpQkFDdEQ7YUFDRjtZQUNILENBQUMsQ0FBQztnQkFDRSxRQUFRLEVBQUUsYUFBYTthQUN4QixDQUFDO0lBQ1IsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNJLE1BQU0sQ0FBQyxPQUFPLENBQ25CLHNCQUEyQztRQUN6QyxPQUFPLEVBQUUsT0FBTztRQUNoQixNQUFNLEVBQUUsY0FBYztRQUN0QixRQUFRLEVBQUUsc0JBQXNCO0tBQ2pDO1FBRUQsT0FBTztZQUNMLFFBQVEsRUFBRSxhQUFhO1lBQ3ZCLFNBQVMsRUFBRTtnQkFDVCxFQUFFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxRQUFRLEVBQUUsbUJBQW1CLEVBQUU7Z0JBQy9ELEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUFFO2FBQ3REO1NBQ0YsQ0FBQztJQUNKLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksTUFBTSxDQUFDLFFBQVE7UUFDcEIsT0FBTztZQUNMLFFBQVEsRUFBRSxhQUFhO1NBQ3hCLENBQUM7SUFDSixDQUFDOzs7WUE5R0YsUUFBUSxTQUFDO2dCQUNSLFlBQVksRUFBRSxDQUFDLGdCQUFnQixDQUFDO2dCQUNoQyxPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUM7Z0JBQ3ZCLE9BQU8sRUFBRSxDQUFDLGdCQUFnQixDQUFDO2FBQzVCOzs7WUEvQ1EsY0FBYztZQWlEK0IsbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAYXV0aG9yIGRhdmlkc2hlbjg0XG4gKi9cblxuaW1wb3J0IHsgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBNYXRoSmF4RGlyZWN0aXZlIH0gZnJvbSAnLi9tYXRoLWpheC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgTWF0aEpheFNlcnZpY2UgfSBmcm9tICcuL21hdGgtamF4LnNlcnZpY2UnO1xuXG4vKipcbiAqIE1vZHVsZSBjb25maWd1cmF0aW9uIGNsYXNzLlxuICpcbiAqIEBleGFtcGxlXG4gKlxuICoge1xuICogICB2ZXJzaW9uOiAnMi43LjUnLFxuICogICBjb25maWc6ICdUZVgtQU1TX0hUTUwnLFxuICogICBob3N0bmFtZTogJ2NkbmpzLmNsb3VkZmxhcmUuY29tJ1xuICogfVxuICovXG5leHBvcnQgY2xhc3MgTW9kdWxlQ29uZmlndXJhdGlvbiB7XG4gIC8qKlxuICAgKiBUaGUgdmVyc2lvbiBvZiB0aGUgTWF0aEpheCBsaWJyYXJ5LlxuICAgKi9cbiAgdmVyc2lvbjogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgY29uZmlnIG5hbWUgb2YgdGhlIE1hdGhKYXggbGlicmFyeS5cbiAgICogUGxlYXNlIGNoZWNrIHRoZSBNYXRoSmF4IFtkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3MubWF0aGpheC5vcmcvZW4vbGF0ZXN0L2NvbmZpZy1maWxlcy5odG1sKSBmb3IgYWxsIHRoZSBjb25maWd1cmF0aW9uIG5hbWVzLlxuICAgKi9cbiAgY29uZmlnOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIE1hdGhKYXggQ0ROIGhvc3RuYW1lLiBQbGVhc2UgY2hlY2sgW2hlcmVdKGh0dHBzOi8vZG9jcy5tYXRoamF4Lm9yZy9lbi9sYXRlc3Qvc3RhcnQuaHRtbCNtYXRoamF4LWNkbikgZm9yIGF2YWlsYWJsZSBDRE4gc2VydmVycy5cbiAgICovXG4gIGhvc3RuYW1lOiBzdHJpbmc7XG59XG5cbi8qKlxuICogTW9kdWxlIHRvIGxvYWQgYW5kIGNvbmZpZ3VyZSB0aGUgTWF0aEpheCBsaWJyYXJ5LlxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogTWF0aEpheE1vZHVsZS5jb25maWcoXG4gKiB7XG4gKiAgICAgdmVyc2lvbjogJzIuNy41JyxcbiAqICAgICBjb25maWc6ICdUZVgtQU1TX0hUTUwnLFxuICogICAgIGhvc3RuYW1lOiAnY2RuanMuY2xvdWRmbGFyZS5jb20nXG4gKiB9KVxuICovXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtNYXRoSmF4RGlyZWN0aXZlXSxcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZV0sXG4gIGV4cG9ydHM6IFtNYXRoSmF4RGlyZWN0aXZlXSxcbn0pXG5leHBvcnQgY2xhc3MgTWF0aEpheE1vZHVsZSB7XG4gIGNvbnN0cnVjdG9yKHNlcnZpY2U6IE1hdGhKYXhTZXJ2aWNlLCBtb2R1bGVDb25maWc/OiBNb2R1bGVDb25maWd1cmF0aW9uKSB7XG4gICAgc2VydmljZS5pbml0KCk7XG5cbiAgICAvKipcbiAgICAgKiBEZWZpbmUgdGhlICoqZnVuY3Rpb24gc3RyaW5nKiogdG8gYmUgaW5zZXJ0ZWQgaW50byB0aGUgbWF0aGpheCBjb25maWd1cmF0aW9uIHNjcmlwdCBibG9jay5cbiAgICAgKi9cbiAgICBjb25zdCBtYXRoSmF4SHViQ29uZmlnID0gKCgpID0+IHtcbiAgICAgIE1hdGhKYXguSHViLkNvbmZpZyh7XG4gICAgICAgIHNraXBTdGFydHVwVHlwZXNldDogdHJ1ZSxcbiAgICAgICAgbWVzc2FnZVN0eWxlOiAnbm9uZScsXG4gICAgICAgIHRleDJqYXg6IHsgcHJldmlldzogJ25vbmUnIH0sXG4gICAgICB9KTtcbiAgICAgIE1hdGhKYXguSHViLlJlZ2lzdGVyLlN0YXJ0dXBIb29rKCdFbmQnLCAoKSA9PiB7XG4gICAgICAgIHdpbmRvdy5tYXRoSmF4SHViJC5uZXh0KCk7XG4gICAgICAgIHdpbmRvdy5tYXRoSmF4SHViJC5jb21wbGV0ZSgpO1xuICAgICAgfSk7XG4gICAgfSkudG9TdHJpbmcoKTtcblxuICAgIGlmIChtb2R1bGVDb25maWcpIHtcbiAgICAgIC8qKlxuICAgICAgICogSW5zZXJ0IHRoZSBNYXRoSmF4IGNvbmZpZ3VyYXRpb24gc2NyaXB0IGludG8gdGhlIEhlYWQgZWxlbWVudC5cbiAgICAgICAqL1xuICAgICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0JykgYXMgSFRNTFNjcmlwdEVsZW1lbnQ7XG4gICAgICAgIHNjcmlwdC50eXBlID0gJ3RleHQveC1tYXRoamF4LWNvbmZpZyc7XG4gICAgICAgIHNjcmlwdC50ZXh0ID0gYCgke21hdGhKYXhIdWJDb25maWd9KSgpO2A7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0uYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICAgIH0pKCk7XG5cbiAgICAgIC8qKlxuICAgICAgICogSW5zZXJ0IHRoZSBzY3JpcHQgYmxvY2sgdG8gbG9hZCB0aGUgTWF0aEpheCBsaWJyYXJ5LlxuICAgICAgICovXG4gICAgICAoZnVuY3Rpb24gKHZlcnNpb246IHN0cmluZywgY29uZmlnOiBzdHJpbmcsIGhvc3RuYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0JykgYXMgSFRNTFNjcmlwdEVsZW1lbnQ7XG4gICAgICAgIHNjcmlwdC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7XG4gICAgICAgIHNjcmlwdC5zcmMgPSBgaHR0cHM6Ly8ke2hvc3RuYW1lfS9hamF4L2xpYnMvbWF0aGpheC8ke3ZlcnNpb259L01hdGhKYXguanM/Y29uZmlnPSR7Y29uZmlnfWA7XG4gICAgICAgIHNjcmlwdC5hc3luYyA9IHRydWU7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0uYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICAgIH0pKG1vZHVsZUNvbmZpZy52ZXJzaW9uLCBtb2R1bGVDb25maWcuY29uZmlnLCBtb2R1bGVDb25maWcuaG9zdG5hbWUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDb25maWd1cmUgdGhlIHByb3ZpZGVyIGZvciBodGUgbW9kdWxlLlxuICAgKlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgZm9yUm9vdCBvciBmb3JDaGlsZCBtZXRob2QgaW5zdGVhZC5cbiAgICogQHBhcmFtIHtib29sZWFufSBmb3JSb290IE1ha2Ugc3VyZSBpdCBpcyBzZXQgdG8gYHRydWVgIGZvciB0aGUgcm9vdCBtb2R1bGUgYW5kIGBmYWxzZWAgZm9yIGFueSBjaGlsZCBtb2R1bGUuXG4gICAqIEBwYXJhbSB7TW9kdWxlQ29uZmlndXJhdGlvbn0gbW9kdWxlQ29uZmlndXJhdGlvbiBBIHtNb2R1bGVDb25maWd1cmF0aW9ufSBpbnN0YW5jZS5cbiAgICpcbiAgICogQHJldHVybiB7TW9kdWxlV2l0aHByb3ZpZGVyczxNYXRoSmF4TW9kdWxlPn0gaW5zdGFuY2VcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgY29uZmlnKFxuICAgIGZvclJvb3QgPSB0cnVlLFxuICAgIG1vZHVsZUNvbmZpZ3VyYXRpb246IE1vZHVsZUNvbmZpZ3VyYXRpb24gPSB7XG4gICAgICB2ZXJzaW9uOiAnMi43LjUnLFxuICAgICAgY29uZmlnOiAnVGVYLUFNU19IVE1MJyxcbiAgICAgIGhvc3RuYW1lOiAnY2RuanMuY2xvdWRmbGFyZS5jb20nLFxuICAgIH1cbiAgKTogTW9kdWxlV2l0aFByb3ZpZGVyczxNYXRoSmF4TW9kdWxlPiB7XG4gICAgcmV0dXJuIGZvclJvb3RcbiAgICAgID8ge1xuICAgICAgICAgIG5nTW9kdWxlOiBNYXRoSmF4TW9kdWxlLFxuICAgICAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICAgICAgeyBwcm92aWRlOiBNb2R1bGVDb25maWd1cmF0aW9uLCB1c2VWYWx1ZTogbW9kdWxlQ29uZmlndXJhdGlvbiB9LFxuICAgICAgICAgICAgeyBwcm92aWRlOiBNYXRoSmF4U2VydmljZSwgdXNlQ2xhc3M6IE1hdGhKYXhTZXJ2aWNlIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfVxuICAgICAgOiB7XG4gICAgICAgICAgbmdNb2R1bGU6IE1hdGhKYXhNb2R1bGUsXG4gICAgICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQ29uZmlndXJlIHRoZSBtb2R1bGUgZm9yIHRoZSByb290IG1vZHVsZS5cbiAgICpcbiAgICogQHBhcmFtIHtNb2R1bGVDb25maWd1cmF0aW9ufSBtb2R1bGVDb25maWd1cmF0aW9uIGNvbmZpZ3VyYXRpb25cbiAgICpcbiAgICogQHJldHVybiB7TW9kdWxlV2l0aHByb3ZpZGVyczxNYXRoSmF4TW9kdWxlPn1cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZm9yUm9vdChcbiAgICBtb2R1bGVDb25maWd1cmF0aW9uOiBNb2R1bGVDb25maWd1cmF0aW9uID0ge1xuICAgICAgdmVyc2lvbjogJzIuNy41JyxcbiAgICAgIGNvbmZpZzogJ1RlWC1BTVNfSFRNTCcsXG4gICAgICBob3N0bmFtZTogJ2NkbmpzLmNsb3VkZmxhcmUuY29tJyxcbiAgICB9XG4gICk6IE1vZHVsZVdpdGhQcm92aWRlcnM8TWF0aEpheE1vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogTWF0aEpheE1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7IHByb3ZpZGU6IE1vZHVsZUNvbmZpZ3VyYXRpb24sIHVzZVZhbHVlOiBtb2R1bGVDb25maWd1cmF0aW9uIH0sXG4gICAgICAgIHsgcHJvdmlkZTogTWF0aEpheFNlcnZpY2UsIHVzZUNsYXNzOiBNYXRoSmF4U2VydmljZSB9LFxuICAgICAgXSxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbmZpZ3VyZSB0aGUgbW9kdWxlIGZvciBhIGNoaWxkIG1vZHVsZS5cbiAgICpcbiAgICogQHJldHVybiB7b2JqZWN0fVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBmb3JDaGlsZCgpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPE1hdGhKYXhNb2R1bGU+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IE1hdGhKYXhNb2R1bGUsXG4gICAgfTtcbiAgfVxufVxuIl19