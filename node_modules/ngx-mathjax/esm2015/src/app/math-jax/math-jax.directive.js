import { Directive, ElementRef, Input, } from '@angular/core';
import { combineLatest, ReplaySubject, Subject, } from 'rxjs';
import { MathJaxService } from './math-jax.service';
import { map } from 'rxjs/operators';
/**
 * Typeset the content or expressions using MathJax library.
 */
export class MathJaxDirective {
    constructor(el, service) {
        /**
         * Observes the change of the input expression.
         */
        this.expressionChangeSubject = new ReplaySubject();
        /**
         * Observes the completion of the initial MathJax typesetting.
         */
        this.mathJaxTypesetSubject = new Subject();
        this.mathJaxHub$ = service.MathJaxHub$;
        this.element = el.nativeElement;
        this.typesetSubscription = combineLatest([
            this.mathJaxHub$,
            this.mathJaxTypesetSubject,
        ]).subscribe(() => {
            MathJax.Hub.Queue(['Typeset', MathJax.Hub, this.element]);
        });
        this.allJax$ = combineLatest([
            this.mathJaxHub$,
            this.mathJaxTypesetSubject,
        ]).pipe(map(() => MathJax.Hub.getAllJax(this.element)));
        this.expressionChangeSubscription = combineLatest([
            this.allJax$,
            this.expressionChangeSubject,
        ]).subscribe(([jax, updateValue]) => updateValue.forEach((v) => MathJax.Hub.Queue(() => {
            // Stop pushing messages to the queue when the component is being destroyed.
            if (!this.isDestroying) {
                return jax[v.order].Text(v.value);
            }
        })));
    }
    ngAfterViewInit() {
        this.hubSubscription = this.mathJaxHub$.subscribe(() => {
            MathJax.Hub.Queue(['Typeset', MathJax.Hub, this.element]);
            MathJax.Hub.Queue(['MathJaxTypeset', this]);
        });
    }
    /**
     * Explicitly trigger the MathJax typeset process.
     *
     * This is useful if the content is loaded dynamically.
     */
    MathJaxTypeset() {
        this.mathJaxTypesetSubject.next();
    }
    ngOnChanges(changes) {
        const expressions = changes.MathJaxExpressions;
        // Shortcut if there's nothing to update.
        if (!(expressions.currentValue instanceof Array)) {
            return;
        }
        // Update only the changed expressions.
        const updateValues = expressions.currentValue
            .map((cv, i) => (expressions.previousValue ? expressions.previousValue[i] !== cv : true)
            ? {
                value: expressions.currentValue[i],
                order: i,
            }
            : undefined)
            .filter((v) => v);
        this.expressionChangeSubject.next(updateValues);
    }
    ngOnDestroy() {
        this.isDestroying = true;
        this.expressionChangeSubscription.unsubscribe();
        this.hubSubscription.unsubscribe();
        this.typesetSubscription.unsubscribe();
        this.mathJaxTypesetSubject.complete();
        this.expressionChangeSubject.complete();
    }
}
MathJaxDirective.decorators = [
    { type: Directive, args: [{
                selector: 'mathjax, [mathjax]',
            },] }
];
MathJaxDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: MathJaxService }
];
MathJaxDirective.propDecorators = {
    MathJaxExpressions: [{ type: Input, args: ['mathjax',] }]
};
//# sourceMappingURL=data:application/json;base64,